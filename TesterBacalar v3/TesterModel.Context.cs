//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TesterBacalar_v3
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TesterBacalarWorkBDEntities : DbContext
    {
        public TesterBacalarWorkBDEntities()
            : base("name=TesterBacalarWorkBDEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Answers> Answers { get; set; }
        public virtual DbSet<LogTable> LogTable { get; set; }
        public virtual DbSet<Questions> Questions { get; set; }
        public virtual DbSet<Rezult> Rezult { get; set; }
        public virtual DbSet<Tests> Tests { get; set; }
        public virtual DbSet<Users> Users { get; set; }
    
        public virtual ObjectResult<Nullable<int>> Check_User(string login, string password)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Check_User", loginParameter, passwordParameter);
        }
    
        [DbFunction("TesterBacalarWorkBDEntities", "GetTableRezult")]
        public virtual IQueryable<GetTableRezult_Result> GetTableRezult(Nullable<int> temp)
        {
            var tempParameter = temp.HasValue ?
                new ObjectParameter("temp", temp) :
                new ObjectParameter("temp", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTableRezult_Result>("[TesterBacalarWorkBDEntities].[GetTableRezult](@temp)", tempParameter);
        }
    
        [DbFunction("TesterBacalarWorkBDEntities", "GetListSubject")]
        public virtual IQueryable<string> GetListSubject(Nullable<int> temp)
        {
            var tempParameter = temp.HasValue ?
                new ObjectParameter("temp", temp) :
                new ObjectParameter("temp", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[TesterBacalarWorkBDEntities].[GetListSubject](@temp)", tempParameter);
        }
    
        public virtual int AddNewAnswerd(string ansewText, Nullable<bool> isCorrect, Nullable<int> answerScore)
        {
            var ansewTextParameter = ansewText != null ?
                new ObjectParameter("ansewText", ansewText) :
                new ObjectParameter("ansewText", typeof(string));
    
            var isCorrectParameter = isCorrect.HasValue ?
                new ObjectParameter("isCorrect", isCorrect) :
                new ObjectParameter("isCorrect", typeof(bool));
    
            var answerScoreParameter = answerScore.HasValue ?
                new ObjectParameter("answerScore", answerScore) :
                new ObjectParameter("answerScore", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewAnswerd", ansewTextParameter, isCorrectParameter, answerScoreParameter);
        }
    
        public virtual int AddNewNameTest(string newName, string subjName)
        {
            var newNameParameter = newName != null ?
                new ObjectParameter("newName", newName) :
                new ObjectParameter("newName", typeof(string));
    
            var subjNameParameter = subjName != null ?
                new ObjectParameter("subjName", subjName) :
                new ObjectParameter("subjName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewNameTest", newNameParameter, subjNameParameter);
        }
    
        public virtual int AddNewQuest(string nameTest, string textQuest, Nullable<int> type)
        {
            var nameTestParameter = nameTest != null ?
                new ObjectParameter("nameTest", nameTest) :
                new ObjectParameter("nameTest", typeof(string));
    
            var textQuestParameter = textQuest != null ?
                new ObjectParameter("textQuest", textQuest) :
                new ObjectParameter("textQuest", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewQuest", nameTestParameter, textQuestParameter, typeParameter);
        }
    }
}
